package org.david.rain.boot.start.dao.mapper.king;

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;
import org.david.rain.boot.start.pojo.KoTask;
import org.springframework.cache.annotation.CacheConfig;
import org.springframework.cache.annotation.Cacheable;

import java.util.List;

/**
 * @author xdw9486
 */
@Mapper
@CacheConfig(cacheNames = "tasksNew")
public interface KoTaskMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ko_task
     *
     * @mbggenerated
     */
    int deleteByPrimaryKey(Integer taskId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ko_task
     *
     * @mbggenerated
     */
    int insert(KoTask record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ko_task
     *
     * @mbggenerated
     */
    int insertSelective(KoTask record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ko_task
     *
     * @mbggenerated
     */
    KoTask selectByPrimaryKey(Integer taskId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ko_task
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(KoTask record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ko_task
     *
     * @mbggenerated
     */
    int updateByPrimaryKeyWithBLOBs(KoTask record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ko_task
     *
     * @mbggenerated
     */
    int updateByPrimaryKey(KoTask record);

    @Cacheable
    @Select("SELECT * FROM ko_task WHERE task_id = #{taskId} ")
    KoTask findByTaskId(@Param("taskId") String taskId);

    /**
     * @return all tasks
     */
    @Cacheable
    @Select("SELECT * FROM ko_task ")
    List<KoTask> findAllTasks();
}